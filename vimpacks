#!/bin/bash

# CopyrightÂ© 2019 @suna All Rights Reserved.
# https://ghsable.github.io/

# USAGE
function usage() {
cat<< _EOT_
vimpacks is a plugin management tool for Vim7 and later.

Usage:
  vimpacks -i       : INSTALL/UNINSTALL
  vimpacks -u       : UPDATE
  vimpacks -e start : EDIT config-start
  vimpacks -e opt   : EDIT config-opt
  vimpacks -h       : HELP

Check:
  ls -l ~/.vim/pack/vimpacks/start
  ls -l ~/.vim/pack/vimpacks/opt

_EOT_
exit 1
}

case ${1} in
  -i)
    function idempotent() {
        VIM_PACK_DIR=~/.vim/pack/vimpacks/${1}
        WORKSPACE_DIR=/tmp/vimpacks/${1}
        VIMPACKS_CONFIGFILE=${HOME}/.config/vimpacks/${1}.list

        if [ ! -f "${VIMPACKS_CONFIGFILE}" ]; then
          echo "NO SUCH : ${VIMPACKS_CONFIGFILE}"
          exit 1
        fi

        echo ''
        echo "---------- ${1} ---------- "
        echo "LOADING ${VIMPACKS_CONFIGFILE} ..."
        echo ''

        # ------ INSTALL
        # make directory: workspace
        [ -d ${VIM_PACK_DIR} ] || mkdir -pv ${VIM_PACK_DIR} >/dev/null
        [ -d ${WORKSPACE_DIR}/main ] || mkdir -pv ${WORKSPACE_DIR}/main >/dev/null
        # make pack/main
        for GITREPOSITORY_URL in $(grep -v -e '^$' -e '^#' ${VIMPACKS_CONFIGFILE})
        do
          # pack/main[1/1]
          GITREPOSITORY_NAME=`echo ${GITREPOSITORY_URL} | cut -d "/" -f 5-5 | rev | cut -c 5- | rev`
          # pack[1/2] - INSTALL
          git clone --depth=1 --recursive ${GITREPOSITORY_URL} ${VIM_PACK_DIR}/${GITREPOSITORY_NAME} 2>/dev/null
          if [ "${?}" = "0" ]; then
            echo "-> (1/1) ${GITREPOSITORY_NAME}"
          else
            echo "INSTALLED : ${GITREPOSITORY_NAME}"
          fi
          # main[1/2]
          mkdir -pv ${WORKSPACE_DIR}/main/${GITREPOSITORY_NAME} >/dev/null
        done
        # pack[2/2]
        ls ${VIM_PACK_DIR} >${WORKSPACE_DIR}/vim_pack_dir.list
        # main[2/2]
        ls ${WORKSPACE_DIR}/main >${WORKSPACE_DIR}/main.list
        # ------
        # ------ UNINSTALL
        # make file uninstall-list
        diff ${WORKSPACE_DIR}/vim_pack_dir.list ${WORKSPACE_DIR}/main.list | grep -e "<" | cut -c 3- >${WORKSPACE_DIR}/uninstall.list
        # UNINSTALL
        if [ -s ${WORKSPACE_DIR}/uninstall.list ]; then
          cd ${VIM_PACK_DIR}
          echo "-- UNINSTALL -------------------"
          rm -rf $(cat ${WORKSPACE_DIR}/uninstall.list)
          cat ${WORKSPACE_DIR}/uninstall.list
          echo "----------------- UNINSTALED -->"
        fi
        # ------
        # clean
        rm -rf ${WORKSPACE_DIR}
    }
    idempotent start
    idempotent opt
    ;;
  -u)
    function update() {
        VIM_PACK_DIR=~/.vim/pack/vimpacks/${1}
        VIMPACKS_CONFIGFILE=${HOME}/.config/vimpacks/${1}.list

        if [ ! -f "${VIMPACKS_CONFIGFILE}" ]; then
          echo "NO SUCH : ${VIMPACKS_CONFIGFILE}"
          exit 1
        fi

        echo ''
        echo "---------- ${1} ----------"
        echo ''

        # ------ Update
        for GITREPOSITORY_URL in $(grep -v -e '^$' -e '^#' ${VIMPACKS_CONFIGFILE})
        do
          GITREPOSITORY_NAME=`echo ${GITREPOSITORY_URL} | cut -d "/" -f 5-5 | rev | cut -c 5- | rev`
          if [ -d ${VIM_PACK_DIR}/${GITREPOSITORY_NAME} ]; then
            cd ${VIM_PACK_DIR}/${GITREPOSITORY_NAME}
            GITPULL_STDOUT=`git pull`
            if [ "${GITPULL_STDOUT}" != "Already up to date." ]; then
              git submodule foreach git pull
              echo "-> (1/1) ${GITREPOSITORY_NAME}"
            else
              echo "UPDATED : ${GITREPOSITORY_NAME}"
            fi
          else
            echo "NO SUCH : ${GITREPOSITORY_NAME}"
          fi
        done
        # ------
    }
    update start
    update opt
    ;;
  -e)
    function edit() {
        VIMPACKS_CONFIGFILE=${HOME}/.config/vimpacks/${1}.list
        #EDITOR=""

        if [ ! -f "${VIMPACKS_CONFIGFILE}" ]; then
          echo "NO SUCH : ${VIMPACKS_CONFIGFILE}"
          exit 1
        fi

        if [ -z "${EDITOR}" ]; then
          EDITOR="vi"
        fi

        $(echo ${EDITOR}) ${VIMPACKS_CONFIGFILE}
    }
    if [ "${2}" != "start" ] && [ "${2}" != "opt" ]; then
      echo "'""${2}""'"": option is not supported"
      exit 1
    fi
    if [ "${2}" = "start" ]; then edit start; fi
    if [ "${2}" = "opt"   ]; then edit opt;   fi
    ;;
  *)
    usage
    ;;
esac
